// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :execresult
INSERT INTO products (
  title, description
) VALUES (
  ?, ?
)
`

type CreateProductParams struct {
	Title       string
	Description string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProduct, arg.Title, arg.Description)
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getOneProduct = `-- name: GetOneProduct :one
SELECT id, title, description, created FROM products
WHERE id = ? LIMIT 1
`

func (q *Queries) GetOneProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getOneProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Created,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, title, description, created FROM products
ORDER BY name
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET title = ?, description = ?
WHERE id = ?
`

type UpdateProductParams struct {
	Title       string
	Description string
	ID          int64
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct, arg.Title, arg.Description, arg.ID)
	return err
}
